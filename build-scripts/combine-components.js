/**
 * Component Combiner Script
 * 
 * This script combines modular JS files into a single complete JS file,
 * ensuring all chart modules are included without duplicating code.
 */

const fs = require('fs');
const path = require('path');

// Paths
const BASE_PATH = path.resolve(__dirname, '..');
const JS_PATH = path.join(BASE_PATH, 'static/js');
const CHARTS_PATH = path.join(JS_PATH, 'charts');
const UTILS_PATH = path.join(JS_PATH, 'utils');

// Output files
const EA_OUTPUT = path.join(JS_PATH, 'enhanced-analytics.js');
const AC_OUTPUT = path.join(JS_PATH, 'appraisal-card.js');

/**
 * Read a file with error handling
 */
function readFileContent(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`Error reading file ${filePath}:`, error.message);
    return '';
  }
}

/**
 * Find module export pattern and remove it
 */
function removeModuleExports(content) {
  return content.replace(/\n?\/\/ Export .+\nif\s*\(typeof module.+\{\s*module\.exports.+\}$/gm, '');
}

/**
 * Generate header comment for combined file
 */
function generateFileHeader(moduleNames) {
  const dateStr = new Date().toISOString().split('T')[0];
  return `/**
 * Combined Enhanced Analytics JavaScript
 * Generated on: ${dateStr}
 * 
 * This file is automatically generated from the following modules:
 * - ${moduleNames.join('\n * - ')}
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */
`;
}

/**
 * Process module files for combining, extracting useful content
 * and removing patterns that would cause duplication
 */
function processModuleForCombining(filePath, moduleName) {
  const content = readFileContent(filePath);
  if (!content) return '';
  
  // Get module content without export statements
  let processedContent = removeModuleExports(content);
  
  // Add module header for clarity in the combined file
  return `
// ============================================================================
// MODULE: ${moduleName}
// ============================================================================
${processedContent}`;
}

/**
 * Combine chart and utility modules into a main file
 */
function combineModules(mainFile, modulePaths, outputFile, isEnhancedAnalytics = true) {
  // Read the main file content
  const mainContent = readFileContent(mainFile);
  
  // Process each module file
  const moduleNames = [];
  const moduleContents = [];
  
  for (const [moduleName, modulePath] of Object.entries(modulePaths)) {
    moduleNames.push(moduleName);
    const moduleContent = processModuleForCombining(modulePath, moduleName);
    moduleContents.push(moduleContent);
  }
  
  // Check if main file has inclusion marker
  if (mainContent.includes('// INCLUDE MODULES:')) {
    // Replace the inclusion marker with actual module content
    const combined = mainContent.replace(
      /\/\/ INCLUDE MODULES:[\s\S]*?(?=\/\/ Chart validator|$)/m,
      `// INCLUDE MODULES: Automatically included by build script
${moduleContents.join('\n\n')}

`
    );
    
    // Add header
    const finalContent = generateFileHeader([path.basename(mainFile), ...moduleNames]) + combined;
    
    // Write the combined file
    fs.writeFileSync(outputFile, finalContent);
    console.log(`Successfully combined modules into ${outputFile}`);
    return true;
  } else {
    // Main file doesn't have inclusion marker, overwrite not safe
    console.error(`Main file ${mainFile} doesn't have the expected inclusion marker.`);
    return false;
  }
}

/**
 * Main entry point - combine the Enhanced Analytics components
 */
function buildEnhancedAnalytics() {
  // Define source files
  const mainFile = path.join(JS_PATH, 'enhanced-analytics-source.js');
  
  // Check if source file exists, if not, use a placeholder
  if (!fs.existsSync(mainFile)) {
    console.warn(`Source file ${mainFile} not found, using current enhanced-analytics.js as source`);
    fs.copyFileSync(EA_OUTPUT, mainFile);
  }
  
  // Define modules to include
  const modulePaths = {
    'radar-chart.js': path.join(CHARTS_PATH, 'radar-chart.js'),
    'price-history-chart.js': path.join(CHARTS_PATH, 'price-history-chart.js'),
    'formatting.js': path.join(UTILS_PATH, 'formatting.js'),
    'chart-validator.js': path.join(UTILS_PATH, 'chart-validator.js')
  };
  
  // Combine modules
  const success = combineModules(mainFile, modulePaths, EA_OUTPUT);
  return success;
}

/**
 * Main entry point - combine the Appraisal Card components
 */
function buildAppraisalCard() {
  // Define source files - would implement similar to Enhanced Analytics
  // For now, just return true as we're focusing on Enhanced Analytics
  return true;
}

// Run the build when this script is executed directly
if (require.main === module) {
  console.log('Building Enhanced Analytics components...');
  const eaSuccess = buildEnhancedAnalytics();
  
  console.log('Building Appraisal Card components...');
  const acSuccess = buildAppraisalCard();
  
  if (eaSuccess && acSuccess) {
    console.log('Build completed successfully!');
    process.exit(0);
  } else {
    console.error('Build completed with errors.');
    process.exit(1);
  }
}

module.exports = {
  buildEnhancedAnalytics,
  buildAppraisalCard
}; 