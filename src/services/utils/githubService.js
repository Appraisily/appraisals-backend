// File: appraisals-backend/src/services/utils/githubService.js\n\n// Ensure \'axios\' and \'@google-cloud/secret-manager\' are installed\n// npm install axios @google-cloud/secret-manager \nconst axios = require(\'axios\');\nconst { SecretManagerServiceClient } = require(\'@google-cloud/secret-manager\');\n\nlet githubToken = null;\nconst secretManagerClient = new SecretManagerServiceClient();\n\n// --- Configuration ---\n// Load required environment variables\nconst config = {\n  githubRepoOwner: process.env.GITHUB_REPO_OWNER,\n  githubRepoName: process.env.GITHUB_REPO_NAME,\n  projectId: process.env.GOOGLE_CLOUD_PROJECT,\n  serviceName: process.env.K_SERVICE || \'appraisals-backend\', // Default if K_SERVICE not set\n  githubTokenSecretName: \'GITHUB_TOKEN\', // Name of the secret in Secret Manager\n  githubApiUrl: \'https://api.github.com\'\n};\n\n// --- Helper Functions ---\n\n/**\n * Fetches the GitHub token from Google Secret Manager.\n * Caches the token after the first successful fetch.\n * @returns {Promise<string>} The GitHub token.\n * @throws {Error} If configuration is missing or fetch fails.\n */\nasync function getGithubToken() {\n  if (githubToken) {\n    return githubToken;\n  }\n  if (!config.projectId) {\n    throw new Error(\'Missing GOOGLE_CLOUD_PROJECT environment variable for Secret Manager.\');\n  }\n\n  const secretPath = `projects/${config.projectId}/secrets/${config.githubTokenSecretName}/versions/latest`;\n  console.log(`[GithubService] Fetching secret: ${secretPath}`);\n\n  try {\n    const [version] = await secretManagerClient.accessSecretVersion({ name: secretPath });\n    const payload = version.payload.data.toString(\'utf8\');\n    if (!payload) {\n      throw new Error(\'Fetched secret payload is empty.\');\n    }\n    githubToken = payload;\n    console.log(\'[GithubService] Successfully fetched GitHub token.\');\n    return githubToken;\n  } catch (error) {\n    console.error(\'[GithubService] Failed to fetch GitHub token from Secret Manager:\', error);\n    throw new Error(\'Could not retrieve GitHub token from Secret Manager.\');\n  }\n}\n\n/**\n * Extracts Trace ID from the X-Cloud-Trace-Context header.\n * @param {string | undefined} traceHeader - The value of the header.\n * @returns {string | null} The extracted Trace ID or null if not found/invalid.\n */\nfunction extractTraceId(traceHeader) {\n    if (!traceHeader) return null;\n    // Format: TRACE_ID/SPAN_ID;o=TRACE_TRUE\n    const parts = traceHeader.split(\'/\');\n    return parts[0] || null;\n}\n\n/**\n * Constructs a URL to the Google Cloud Logs Explorer for a specific trace.\n * @param {string | null} traceId - The Trace ID.\n * @returns {string | null} The Logs Explorer URL or null if essential info is missing.\n */\nfunction generateLogExplorerLink(traceId) {\n    if (!traceId || !config.projectId || !config.serviceName) {\n        return null;\n    }\n    const query = `resource.type="cloud_run_revision" resource.labels.service_name="${config.serviceName}" trace="projects/${config.projectId}/traces/${traceId}"`;\n    const encodedQuery = encodeURIComponent(query).replace(\'%20\',\'+\').replace(\'%2F\',\'/\'); // Basic encoding\n    return `https://console.cloud.google.com/logs/query;query=${encodedQuery};?project=${config.projectId}`;\n}\n\n// --- Core Function ---\n\n/**\n * Creates a GitHub issue for a given error.\n * Includes a link to Cloud Run logs if possible. Does NOT include duplicate detection yet.\n *\n * @param {Error} error The error object caught by the handler.\n * @param {import(\'express\').Request} [req] Optional Express request object to extract context.\n * @param {string} [serviceNameOverride] Optional override for service name.\n */\nasync function createGithubIssue(error, req, serviceNameOverride) {\n  const serviceName = serviceNameOverride || config.serviceName;\n\n  // Validate essential configuration\n  if (!config.githubRepoOwner || !config.githubRepoName) {\n    console.error(\'[GithubService] Missing GITHUB_REPO_OWNER or GITHUB_REPO_NAME environment variables. Cannot create issue.\');\n    return; // Fail silently in this case\n  }\n\n  let token;\n  try {\n    token = await getGithubToken();\n  } catch (tokenError) {\n    console.error(\'[GithubService] Failed to get token, cannot create issue:\', tokenError);\n    return; // Fail silently\n  }\n\n  // Extract context\n  const requestMethod = req?.method || \'N/A\';\n  const requestUrl = req?.originalUrl || \'N/A\';\n  const traceHeader = req?.headers?.[\'x-cloud-trace-context\'];\n  const traceId = extractTraceId(traceHeader);\n  const logLink = generateLogExplorerLink(traceId);\n\n  // Format Issue\n  const title = `[Backend Error - ${serviceName}] ${error.message.substring(0, 100)}${error.message.length > 100 ? \'...\' : \'\'}`; // Truncate long messages\n  let body = `**Error:** ${error.message}\\n\\n`;\n  body += `**Service:** ${serviceName}\\n`;\n  body += `**Request:** ${requestMethod} ${requestUrl}\\n`;\n  body += `**Timestamp:** ${new Date().toISOString()}\\n`;\n  if (traceId) {\n    body += `**Cloud Trace ID:** \`${traceId}\`\\n`;\n  }\n  if (logLink) {\n    body += `**Logs Explorer Link:** [View Logs](${logLink})\\n\\n`;\n  }\n  body += \'**Stack Trace:**\\n```\\n\';\n  body += error.stack || \'No stack trace available.\';\n  body += \'\\n```\';\n\n  const issueUrl = `${config.githubApiUrl}/repos/${config.githubRepoOwner}/${config.githubRepoName}/issues`;\n\n  // TODO: Implement duplicate check here before creating\n\n  try {\n    console.log(`[GithubService] Attempting to create GitHub issue: ${title}`);\n    const response = await axios.post(\n      issueUrl,\n      { title, body },\n      {\n        headers: {\n          \'Authorization\': `Bearer ${token}`,\n          \'Accept\': \'application/vnd.github.v3+json\',\n          \'Content-Type\': \'application/json\',\n        },\n      }\n    );\n    console.log(`[GithubService] Successfully created GitHub issue: ${response.data?.html_url}`);\n  } catch (githubError) {\n    // Log error details if possible\n    const errorMessage = githubError.response?.data?.message || githubError.message;\n    console.error(`[GithubService] Failed to create GitHub issue (${githubError.response?.status}):`, errorMessage);\n    // Optionally log githubError.response?.data?.errors for more details\n  }\n}\n\nmodule.exports = {\n  createGithubIssue\n}; 